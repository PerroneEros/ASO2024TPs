/*3) Realizar los recorridos de las siguientes matrices de NxN, donde N es par, tal como se indica
en las siguientes figuras:
a)*/
#include <iostream>
using namespace std;

int main (){
const int fila = 6,columna = 6;
int matriz [fila][columna];

//cargo matriz 
for (int i = 0;i < fila;i++){
    for (int j = 0;i < columna;j++){
        matriz [i][j] = i * 10 + j;
    }
}
//muestro matriz 
for (int i = 1;i < fila;i++){
    if ((i % 2) == 0){
        for (int j = columna -1 ;j >= 0;j--){
            cout << matriz [i][j] << "\t";
        }
        cout << endl;
    }else{
        for (int j = 0;j < columna;j++){
            cout << matriz [i][j] << "\t";
        }
        cout << endl;
    }
    
}
return 0;    
}
/*
#include <iostream>
using namespace std;

int main (){
    const int fila = 4,columna = 4;
    int matriz [fila][columna];
    //cargando matriz 
    for (int i = 0;i < fila;i++){
        for (int j = 0;j < columna;j++){
            matriz [i][j] = i * 10 + j;   //esto sirve para cargar las posiciones de la matriz
        }
    }
    //mostrar matriz
        for (int j = 0;j < columna;j++){
         for (int i = fila - 1;i >= 0 ;i--){
           cout << matriz [i][j] << "\t";  
         }
         cout << endl;
        }
    
    return 0;
} 
*/
/*2) Dado un arreglo de tamaño N=16 cargado aleatoriamente. Copiar sus valores en una matriz
de 4x4.
*/
/*
#include <ioistream>
#include <cstdlib>
#include <ctime>
using namespace std;

int main (){
    const int fila = 4,columna = 4;
    int matriz [fila][columna];
    int arreglo [16];
    int k = 0;
    srand(time(0));
    //cargo un arreglo con 16 numeros random
    
    for (int i = 0;i < 16;i++){
        arreglo[i] = rand() % 10 + 1;
    }
    //los escribo 
    for (int k = 0;k < 16;k++){
        cout << arreglo[k];
    }
    cout << endl;
    //cargo matriz con numeros aleatoreos
    
    for (int i = 0;i < fila;i++){
        for (int j = 0;j < columna;j++){
            matriz [i][j] = arreglo[k+j]; 
            cout << k+j;
        }
        k = k+4;
    }
    
    //muestro matriz 
    cout << endl;
    for (int i = 0;i < fila;i++){
        for (int j = 0;j < columna;j++){
            cout << matriz [i][j] << "\t";
        }
        cout << endl;
    }
    
    return 0;
}
*/
/*1) Cargar una matriz de NxM con valores aleatorios entre [1,100] y comprobar si existen valores
repetidos.
*/
/*
#include <iostream>
#include<cstdlib>
#include <ctime>
using namespace std;

int main () {
    const int fila = 10,columna = 10;
    int matriz [fila][columna];
    int numero_ingresado;
    bool encontrado = false;
    srand(time(0)); //semilla pàra numeros aleatorios
    
    //cargo matriz con numeros aleatorios del 1 al 100
    for (int i = 0;i < fila;i++){
        for(int j = 0;j < columna;j++){
            matriz[i][j] = rand() % 100 + 1;
        }    
    }
    
    //mostrar matriz
    
    for (int i = 0;i < fila;i++){
        for(int j = 0;j < columna;j++){
            cout << matriz[i][j] << "\t";
        }   
        cout << endl;
    }

    cout << "ingrese un valor para comprobar si esta repetido : "<< endl;
    cin >> numero_ingresado;
    
    //recorro matriz para ver si hay un repetido 
    int tope_i = 0; //tope fila      te muestra la posicion del numero     
    int tope_j = 0; //tope columna
    
    while ((tope_i < fila) && (!encontrado)){
        while((tope_j < columna) && (!encontrado)){
         if (numero_ingresado == matriz[tope_i][tope_j]){
             encontrado = true;
         }
         
         tope_j++;   
        }
        tope_i++;
    }
    
    if (encontrado == true){
        cout << "se encontro en:" << tope_i  << tope_j  << endl;
    }
    return 0;
}
*/
                        // Práctico N° 5.1: Recorrido de Matrices

/*12) Escribir un programa que complete una matriz de 10x10 con el número 1 para los índices que
se encuentren por encima de la diagonal principal y con 0 los que estén por debajo. Los
valores de la diagonal principal deben ir en forma descendente desde el 10 hasta el 1.
1/
/*
#include <iostream>
using namespace std;

int main(){
    const int fila = 10,columna = 10;
    int matriz [fila][columna];
//carga la matriz con las condiciones 

    for (int i = 0;i < fila;i++){
        for(int j = 0;j < columna;j++){
         if (i == j){                                  //diagonal principal
                matriz[i][j] = 10 - i;
         } else if (i < j){                            //superior
             matriz [i][j] = 1;
         }else if (i > j)                              //inferior
            matriz [i][j] = 0;
        }
    }
//muestra por pantalla la matriz 

    for (int i = 0;i < fila;i++){
        
        for (int j = 0;j < columna;j++){
            cout << matriz [i][j] <<"\t" ; 
        } 
        cout << endl;
    }
    
    return 0;
}
*/
/*11) Escribe un programa donde la cantidad de filas y columnas de la matriz estén definidas por
constantes distintas. Luego, completa los elementos de la matriz siguiendo estas reglas: si la
suma de los índices de un lugar es par, ese lugar se llenará con la raíz cuadrada de la suma de
los índices. En caso de que la suma de los índices sea impar, ese lugar se llenará con un valor
de 0.
*/
/*
#include <iostream>
#include <cmath>
using namespace std;

int main (){
    const int fila = 5;
    const int columna = 6;
    int matriz[fila][columna];
    
   for (int i = 0; i < fila; i++) {
        for (int j = 0; j < columna; j++) {
            if ((i + j) % 2 == 0) {
                matriz[i][j] = sqrt(i + j);
            } else {
                matriz[i][j] = 0;
            }
        }
    }
    
     for (int i = 0; i < fila; i++) {
        for (int j = 0; j < columna; j++) {
            cout << matriz[i][j] << "\t";
        }
        cout << endl;
    }
    return 0;
}
*/
/*10) Escribir un programa que le permita al usuario ingresar la diagonal principal de una matriz
de 5x5 y que los otros lugares se completen con una X*/
/*
#include <iostream>
using namespace std;

int main(){
    const int fila = 5,columna = 5; 
    int diagonalprincipal[5];
    
     cout << "ingrese la diagonal principal: ";
     
     for(int i = 0;i < 5;i++){
        cin >> diagonalprincipal[i];
     }
     
     for(int i=0;i < fila;i++){
         
         for(int j=0;j < columna;j++){
             if (i == j){
                 cout << diagonalprincipal[i] << "\t";
             }
             else{
                 cout << "X \t";
             }
         }
         cout << endl;
     }
    return 0;
}
*/
/*9) Matriz y búsqueda.
a) Escribir un programa que complete una matriz de 10x10 con números aleatorios entre el
1 y el 100. Luego en un arreglo debe guardar el resultado de sumar cada una de las filas,
por lo tanto, va a tener 10 lugares. Mostrar el contenido del arreglo.

b) Debe permitir que el usuario ingrese un número y realizar la búsqueda de este en la matriz.
Si lo encuentra debe mostrar un mensaje que indique que lo encontró y la posición donde
está ubicado en la matriz. Si no lo encuentra que muestre un mensaje de que la búsqueda
finalizo sin éxito. Esto debe repetirse hasta que el usuario ingrese de alguna forma que
no quiere realizar más búsquedas. */
/*
#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;
 
int main (){
    const int fila = 10,columna = 10;
    int matriz[fila][columna];
    int numero;
    char continuar;
    
    srand(time(0));
    
    //carga la matriz con con numeros random
   cout << " matriz generada: "<< endl;
   
    for(int i = 0;i < fila;i++){
        for(int j = 0;j < columna;j++){
            matriz[i][j] = rand() % 100 + 1;
            cout << matriz[i][j] << " ";
        }
        cout <<endl;
    }
     
    do{
        cout << "ingrese un numero para nuscar en la matriz: ";
        cin >> numero;
        
         bool encontrado = false;
        int posFila = -1, posColumna = -1;
        
        // Busca el número en la matriz
        for (int i = 0; i < fila; i++) {
            for (int j = 0; j < columna; j++) {
                if (numero == matriz[i][j]) {
                    encontrado = true;
                    posFila = i;
                    posColumna = j;
                    break;
                }
            }
            if (encontrado) break;
        }
        
        if (encontrado) {
            cout << "Numero " << numero << " encontrado en la posicion (" << posFila << ", " << posColumna << ").\n";
        } else {
            cout << "Numero " << numero << " no encontrado en la matriz.\n";
        }
        
        cout << "¿Desea realizar otra busqueda? (s/n): ";
        cin >> continuar;
    } while (continuar == 's' || continuar == 'S');
    
    return 0;
}
*/

/*a)
#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

int main (){
    const int fila = 10,columna = 10;
    srand(time(0));
    int matriz [fila][columna];
    int sumafilas[fila];
    
    
    for(int i = 0;i < fila;i++){
        for(int j = 1;j <= columna;j++){
         matriz[i][j] = rand() % 100 + 1;
         cout << matriz[i][j] << " ";
        }
        cout <<endl;
    }
     
    for(int i = 0;i < fila;i++){
     for(int j = 1;j <= columna;j++){
         sumafilas[i]+= matriz[i][j];
        }
    }
    
    cout << endl;
    
    cout << "la suma de las filas son: ";
    for (int i = 0;i < 10;i++){
        cout << sumafilas [i] << endl;
    }
    return 0;
}
*/

/*8) Escribir un programa que complete una matriz de 5x5 con la suma de sus correspondientes
índices. Ejemplo en la posición fila 3 columna 2 debe guardar el número 5.
*/
/*
#include <iostream>
#include <cmath>

using namespace std;

int main (){
    const int fila = 5,columna = 5;
    
    for (int i = 1;i <= fila;i++){
        
        for (int j = 1;j <= columna;j++){
         cout << i+j <<" "; 
        } 
        cout << endl;
    }
    
    return 0;
}
*/
/*7) Escribir un programa que le pida al usuario ingresar una palabra de no más de 10 letras, luego
debe llenar un arreglo con las letras de la palabra desde atrás hacia delante y en caso de que
queden huecos en el arreglo debe llenarse con *. Luego mostrar en consola el contenido de
dicho arreglo.
Ejemplo: Si se ingresa la palabra trabajo, el arreglo debe quedar de la siguiente manera ojabart*.
*/
/*
#include <iostream>
#include <string>

using namespace std;

int main (){
    
    string palabra;
    int cantidadletras;
    const int maximoletras = 10;
    char cargadedatos[10];

     cout << "ingrese una palabra: "<< endl;
     cin >> palabra;
     
     cantidadletras = palabra.length();
     
     if ((cantidadletras >= 1) && (cantidadletras <= maximoletras)){
         
        for (int i = 0; i < 9;i++){
            cargadedatos = palbra
        } 
         
         
     }
     else {
         cout << "ERROR" << endl;
     }
    return 0;
}


*/
/*6) Escribe un programa que genere un arreglo de 8 lugares y lo llene con números aleatorios.
Luego, crea otro arreglo del mismo tamaño y llena este segundo arreglo con los valores del
primero, pero en orden inverso. Finalmente, muestra ambos arreglos en pantalla.
*/
/*
#include <iostream>
#include <cstdlib>
#include <cmath>

using namespace std;

int main (){
 int arregloaleatorio[8];
 int arrgeloinverso[8];
 srand(time(0));
 cout << "los numeros aleatorios son: ";
 for (int i = 0;i < 8;i++){
     arregloaleatorio[i] = rand () % 100 + 1;
     cout << arregloaleatorio[i] << " "; 
 }   
  cout << endl;
 cout << "la seceuncia invertida es: ";
 for (int i = 7; i >= 0;i--){
     arrgeloinverso[i] = arregloaleatorio[i];
     cout << arrgeloinverso[i] << " ";
 }    
    
    return 0;    
}

*/
/*5) Desarrolla un programa que genere dos arreglos de tamaño 5 y los llene con números
aleatorios entre 3 y 57. Luego, crea un tercer arreglo del mismo tamaño donde cada elemento
sea la suma de los elementos correspondientes de los dos primeros arreglos.
*/
/*
#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int main (){
 
 int arreglo1 [5];
 int arreglo2 [5];
 int sumaarreglos[5];
 srand(time(0));
    
 cout << "ingrese 5 numeros: " << endl;
 for(int i = 0;i < 5;i++){
     arreglo1[i] = rand() % 55 + 3;
     cout << arreglo1[i] << endl;
 }
 
 cout << "ingrese 5 numeros: " << endl;
 for(int i = 0;i < 5;i++){
     arreglo2[i] = rand() % 55 + 3;
     cout << arreglo2[i] << endl;
 }
 
 for (int i = 0;i < 5;i++){
     sumaarreglos[i] = arreglo1[i] + arreglo2[i];
     cout << sumaarreglos[i] << " ";
 } 
    return 0;
}
*/
/*4) Desarrolla un programa que permita al usuario ingresar 5 valores para cada uno de dos
arreglos. Luego, debe crear un tercer arreglo que contenga la unión de los dos anteriores
ingresados por el usuario y lo muestre en consola.
*/
/*
#include <iostream>
#include <cmath>

using namespace std;

int main (){
    
    int arreglo1 [5];
    int arreglo2 [5];    
    int arreglo3 [10]; 
    
    cout << "ingrese 5 valores:" <<endl;
    for (int i = 0; i < 5;i++){
     cin >> arreglo1 [i];
    }
    cout << "ingrese 5 valores:" <<endl;
    for (int i = 0; i < 5;i++){
     cin >> arreglo2 [i];
    }
    for (int i = 0;i < 5;i++){
     arreglo3[i]=arreglo1[i];
    }
    for (int i = 0;i < 5;i++){
     arreglo3[i + 5]=arreglo2[i];
    }
    cout << "el arreglo 3 da: ";
    for (int i = 0;i < 10;i++){
     cout << arreglo3[i] << " ";
    }
    return 0;
}
*/
/*3) Escribe un programa que genere un arreglo de 8 elementos, llenándolo con números aleatorios
del 1 al 10. Luego, el programa debe encontrar y mostrar los valores mayor y menor del
arreglo. Además, contar y mostrar cuantas veces se repiten en el arreglo.
*/
/*
#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int main (){
 int secuencia [8];
 int mayor,menor,contadormenor,contadormayor;
 
 srand(time(0));
 
 cout << "los numero generados son:";
  
  for (int i = 0; i < 8;i++){
      
      secuencia[i] = rand() % 10 + 1;
      cout << secuencia [i] << endl;
  }
  
  mayor = secuencia[0];
  menor = secuencia[0];
  contadormayor = 0;
  contadormenor = 0;
  
  for (int i=1;i < 8;i++){
      if (secuencia[i] > mayor){
          mayor = secuencia[i];
          
      if (secuencia[i] == mayor){
              contadormayor += 1;
          }
      }
      else if (secuencia[i] < menor){
          menor = secuencia[i];
          
          if (secuencia[i] == menor){
              contadormenor += 1;
          }
      }
  }
  cout << "el mayor de los numeros es: " << mayor <<" y el menor es: "<< menor << endl;
  cout << "el mayor se repite: " << contadormayor <<" veces y el menor: " << contadormenor <<" veces"<< endl; 
 return 0;   
}
*/
/*2) Escribe un programa que ingrese 10 números y los almacene en un arreglo, estos deben ser
{24, 5, 58, 100, 0, -8, 94, 96, -16, 105}. Luego, el programa debe pedirle al usuario que
ingrese un número para buscar en el arreglo. Si el número se encuentra en el arreglo, el
programa debe mostrar la posición en la que se encuentra. Si el número no está en el arreglo,
el programa debe mostrar un mensaje indicando que no se encontró.*/
/*
#include <iostream>
using namespace std;

int main (){
  int secuencia [10] = {24, 5, 58, 100, 0, -8, 94, 96, -16, 105};
  int numero;
  int contador = 0;
  
  cout << "ingrese un numero:" << endl;
  cin >> numero;
  
 for (int i = 0; i <= 10 ; i++) {
     if(numero == secuencia [i]){
         cout << "el numero se encontro en la posición numero:" << contador << endl;
     } 
     else {
         cout << "el numero no se encontro" <<endl;
     } 
     
    contador += 1; 
 }
  return 0;
 }
 */
/*1) Escribe un programa que le pida al usuario que ingrese 10 números y los almacene en un
arreglo. Luego, el programa debe calcular la suma de todos los elementos del arreglo y
mostrar el resultado.*/
/*
#include <iostream>
using namespace std;

int main () {
    int numero [10];
    int suma = 0;

     cout << "ingrese 10 numeros:" << endl;
     
    for (int i = 0;i < 10;i++){
     cin >> numero[i];
     suma += numero[i];
    }
    cout << "la suma de los numeros es:" << suma <<endl;
    
    return 0;
}
*/
